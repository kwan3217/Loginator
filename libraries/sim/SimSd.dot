digraph G {
  wait_cmd -> wait_arg [label="Get cmd byte, {4 arg bytes left}"]
  wait_arg -> wait_arg [label="Get arg byte, more than 0 arg bytes {shift and accumulate arg, dec arg bytes}"]
  wait_arg -> wait_crc [label="Get arg byte, 0 arg bytes {shift and accumulate arg}"]
  wait_crc -> respond_start [label="Get crc7 byte, go_idle {respond count=1, R1}"]
  wait_crc -> respond_start [label="Get crc7 byte, app {respond count=1, R1}"]
  wait_crc -> respond_start [label="Get crc7 byte, send op cond {respond count=1, R1}"]
  wait_crc -> respond_start [label="Get crc7 byte, cmd read ocr {respond count=5, R3}"]
  wait_crc -> respond_start [label="Get crc7 byte, send if cond {respond count=5, R7}"]
  wait_crc -> respond_start [label="Get crc7 byte, set blocklen {respond count=1, R1}"]
  wait_crc -> read_start [label="Get crc7 byte, send cid {fill read buffer with CID, read count=16}"]
  wait_crc -> read_start [label="Get crc7 byte, send csd {fill read buffer with CSD, read count=16}"]
  wait_crc -> read_start [label="Get crc7 byte, read block {read block from disk, fill read buffer with block, read count=512}"]
  wait_crc -> respond_start [label="Get crc7 byte, write block {respond count=1, R1, write count=512}"]
  respond_start -> respond_start [label="more than 1 respond delay left {send 0xFF, dec respond delay}"]
  respond_start -> respond_send [label="1 respond delay left {send 0xFF}"]
  respond_send -> respond_send [label="More than 1 respond count {send respond byte, inc respond ptr, dec respond count}"]
  respond_send -> wait_cmd [label="1 respond count, 0 write count {send respond byte}"]
  respond_send -> write [label="1 respond count, more than 0 write count {send 0xFF, buffer write byte, inc write ptr, dec write count}"]
  write -> write [label="more than 1 write count {send 0xFF, buffer write byte, inc write ptr, dec write count}"]
  write -> wait_cmd [label="1 write count {send 0xFF, buffer write byte, write block to disk}"]
  read_start -> read_start [label="More than 1 read delay {send 0xFE, dec read delay}"]
  read_start -> read [label="More than 1 read count {send read byte, inc read ptr, dec read count}"]
  read -> wait_cmd [label="1 read count {send read byte}"]

}
